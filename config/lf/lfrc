# Basic Settings
# # interpreter for shell commands
set shell zsh
set shellopts '-euy'
set ifs "\n"

# set preview false

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id


set cursorpreviewfmt ""

# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        video/*) mpv "$f" >/dev/null 2>&1;;
        *) xdg-open "$f" ;;
    esac
}}


cmd fzf_jump ${{
    res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
  if [ -f "$res" ]; then cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="grep --extended-regexp --color=always --recursive --line-number -I --exclude='.*' --exclude-dir='.git' --exclude-dir='*cache*' --ignore-case"
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map <c-g> :fzf_search

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}


# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}
    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

cmd swaybg ${{
  eww open --toggle bar
  swaybg -i $f &
  eww open --toggle bar
  }}

cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

# toggle preview window
cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

map zp toggle_preview

#--------  Bindings  ----------------#
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

# File Openers
map e $$EDITOR "$f"
map u $nvim -MR "$f"
# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Basic Functions
map ss stripspace
map sb swaybg
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

# Movement
map <c-f> :fzf_jump
map gtr cd ~/.local/share/Trash/files
map gv. cd ~/videos
map gvm cd ~/Videos/Movies/
map gve cd ~/Videos/Education/
map gp cd ~/Pictures
map gw cd ~/.local/share/backgrounds/catppuccin
map gd cd ~/Documents
map gD cd ~/Downloads
map gj cd ~/Documents/JNTUH/
map gs cd ~/.local/bin/
map gC cd ~/.config
map gL cd ~/.local
map gc cd ~/myconfigs/config/
map gl cd ~/myconfigs/local/
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share
map zp toggle_preview
map J :updir; set dironly true; down; set dironly false; open
map K :updir; set dironly true; up; set dironly false; open
